class binarytrees() {

	var minDepth = 4;
	
	class TreeNode(left, right, item)
	{
		// private TreeNode left, right;
		// private int item;
				
		var itemCheck = def() {
			// if necessary deallocate here
			// println(">>" + (left==null) + " and " + (right==null) );
			
			if ( (left==null) || (right==null) ) {
				// println("in here");
				return item;
			}
			else {
				// println(left + " and " + right);
				return item + left.itemCheck() - right.itemCheck();
			}
		}
	}
	
	val main = def(args) {
		var n = 0;
		if ( length( args ) > 0) n = toNumber(args[0]);
		
		var maxDepth = n;
		if ( (minDepth + 2) > n) maxDepth = minDepth + 2;
		
		var stretchDepth = maxDepth + 1;
		
		var node = bottomUpTree(0,stretchDepth)
		var check = node.itemCheck();
		println("stretch tree of depth "+stretchDepth+"\t check: " + check);
		
		var longLivedTree = bottomUpTree(0,maxDepth);
		
		var depth = minDepth;
		while( depth<=maxDepth ){
			var iterations = 1 << (maxDepth - depth + minDepth);
			check = 0;
			
			var i = 1;
			while( i<=iterations){
				var node = bottomUpTree(i,depth);
				check = check + node.itemCheck();
				
				node = bottomUpTree(-i,depth)
				check = check + node.itemCheck();
				
				i = i + 1;
			}
						
			println( (iterations*2) + "\t trees of depth " + depth + "\t check: " + check);
			
			depth = depth + 2;
		}	
		
		println("long lived tree of depth " + maxDepth + "\t check: "+ longLivedTree.itemCheck());
	}
	
	var bottomUpTree = def(item, depth){
			if (depth > 0 ) {
				
				return new TreeNode(
						bottomUpTree(2*item-1, depth-1)
						, bottomUpTree(2*item, depth-1)
						, item);
			}
			else {				
				return new TreeNode(null, null, item);
			}
	}
	

}

 var bt = new binarytrees();
 var startTime = time();
 bt.main([20]);
 var endTime = time();
 println("Total time: " + ( (endTime - startTime) / 1000) );
 
/*
class a() {
	class b(left) {	
		var calcDepth = def() {
			if ( (left == null) ) return 0;
			else return 1 + left.calcDepth();
		}
	}
	var depth = def() {
		var b = new b(
					new b(
						new b(null)
					) 
				);
		println(b.calcDepth());
	}
	
}
var a = new a();
a.depth();
*/