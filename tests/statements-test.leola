debug:enableAssert(true)

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	If Statement
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/	

var x = 0
if true {
	x += 1
}

debug:assertEq(x, 1)


if false {
	x += 1
}
else {
	x -= 1
}

debug:assertEq(x, 0)

x = 0
if (x==0) {
	x += 1
}

debug:assertEq(x, 1)


x = -1
if (x==0) || (x<0) {
	x += 1
}

debug:assertEq(x, 0)

x = -1
if ((x==0) || (x<0)) {
	x += 1
}

debug:assertEq(x, 0)

x = -1
if x==0 || (x<0) {
	x += 1
}

debug:assertEq(x, 0)

x = -1
if (x==0) || x<0 {
	x += 1
}

debug:assertEq(x, 0)


x = -1
if true && (x<0) {
	x += 1
}

debug:assertEq(x, 0)


x = -1
if (true) && (x<0) {
	x += 1
}

debug:assertEq(x, 0)


x = -1
if ((true) && (x<0)) {
	x += 1
}

debug:assertEq(x, 0)

x = -1
if (true) && x<0 {
	x += 1
}

debug:assertEq(x, 0)

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	While Statement
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/	

x = 0
var i = 2
while i > 0 {
	x += 1
	i -= 1	
} 

debug:assertEq(x, 2)


x = 0
i = 2
while i > 0 {
	x += 1		
	i -= 1	
	
	if i == 1 {
		break
	}
} 

debug:assertEq(x, 1)


x = 0
i = 3
while i > 0 {
	i -= 1	
	
	if i == 1 {
		continue
	}
	x += 1			
} 

debug:assertEq(x, 2)


x = 0
i = 3
while i > 0 || i > 0 {
	i -= 1	
	
	if i == 1 {
		continue
	}
	x += 1			
} 

debug:assertEq(x, 2)


x = 0
i = 3
while (i > 0) || (i > 0) {
	i -= 1	
	
	if i == 1 {
		continue
	}
	x += 1			
} 

debug:assertEq(x, 2)


x = 0
i = 3
while (i > 0 || i > 0) {
	i -= 1	
	
	if i == 1 {
		continue
	}
	x += 1			
} 

debug:assertEq(x, 2)


x = 0
i = 3
while ((i > 0) || (i > 0)){
	i -= 1	
	
	if i == 1 {
		continue
	}
	x += 1			
} 

debug:assertEq(x, 2)


x = 0
i = 3
while ((i > 0) && (i > 0)){
	i -= 1	
	
	if i == 1 {
		continue
	}
	x += 1			
} 

debug:assertEq(x, 2)


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	Switch Expression
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/	

x = 3
switch x
	when 0 -> debug:assertFail()
	when 1 -> debug:assertFail()
	when 2 -> debug:assertFail()
	when 3 -> debug:assertEq(x, 3)
	
x = 3
switch x
	when 0 -> debug:assertFail()
	when 3 -> debug:assertEq(x, 3)	
	else debug:assertFail()
	
x = 4
switch x
	when 0 -> debug:assertFail()
	when 3 -> debug:assertFail()
	else debug:assertEq(x, 4)
	
x = 4
switch x {
	when 0 -> debug:assertFail()
	when 3 -> debug:assertFail()
	else debug:assertEq(x, 4)	
}	

x = 4	
switch 
	when x==3 -> debug:assertFail()	
	when x==4 -> debug:assertEq(x, 4)
	else debug:assertFail()
	
x = 4	
switch {
	when x==3 -> debug:assertFail()	
	when x==4 -> debug:assertEq(x, 4)
	else debug:assertFail()	
}	

x = 4	
switch 
	when x==4 -> debug:assertEq(x, 4)	
	
x = 4	
switch {	
	when x==4 -> debug:assertEq(x, 4)	
}
	
	
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	Case Expression
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/		

	
var y = 0	
x = 3
y = case x
	when 0 -> debug:assertFail()
	when 1 -> debug:assertFail()
	when 2 -> debug:assertFail()
	when 3 -> x
debug:assertEq(x, y)
	
x = 3
y = case x
	when 0 -> debug:assertFail()
	when 3 -> x
	else debug:assertFail()
debug:assertEq(x, y)
	
x = 4
y = case x
	when 0 -> debug:assertFail()
	when 3 -> debug:assertFail()
	else x
debug:assertEq(x, y)	
	
x = 4
y = case x {
	when 0 -> debug:assertFail()
	when 3 -> debug:assertFail()
	else x
}	
debug:assertEq(x, y)

x = 4	
y = case
	when x==3 -> debug:assertFail()	
	when x==4 -> x
	else debug:assertFail()
debug:assertEq(x, y)	
	
x = 4	
y = case {
	when x==3 -> debug:assertFail()	
	when x==4 -> x
	else debug:assertFail()	
}	
debug:assertEq(x, y)

x = 4	
y = case 
	when x==4 -> x
debug:assertEq(x, y)	
	
x = 4	
y = case {	
	when x==4 -> x
}	
debug:assertEq(x, y)
	
	
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	IS operator
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/		
	
debug:assertTrue(x is INTEGER)
debug:assertTrue(x is Integer)
debug:assertTrue(1L is Long)
debug:assertTrue(1.0 is Real)
debug:assertTrue("x" is String)
debug:assertTrue({} is Map)
debug:assertTrue([] is Array)

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	Classes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/	

class X();
debug:assertTrue(new X() is X)	
	
	
class Y;
debug:assertTrue(new Y() is Y)	

class W is Y();
debug:assertTrue(new W() is Y)
debug:assertTrue(new W() is W)
	
class Z(x);
class A(x) is Z(x);
debug:assertTrue(new A("x") is A)
debug:assertTrue(new A("x") is Z)
var a = new A("x")
debug:assertEq(a.x, "x")
	
class B(y) is Z("xx");	
debug:assertTrue(new B("x") is B)
debug:assertTrue(new B("x") is Z)	
var b = new B("yy")
debug:assertEq(b.x, "xx")	
debug:assertEq(b.y, "yy")	
	
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	Elvis Operator
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/		
	
var json = {
   header -> {
      data -> {
         array -> [],
		 map   -> {},
		 bool  -> true,
		 int   -> 1,
		 long  -> 1L,
		 real  -> 1.0,
		 string -> "string",
		 nil   -> null,
     },
	 
	 nil -> null
   }
}   	
		
debug:assertEq(json?header?data?array, []) 
debug:assertEq(json?header?data?map, {}) 
debug:assertEq(json?header?data?bool, true) 
debug:assertEq(json?header?data?int, 1) 
debug:assertEq(json?header?data?long, 1L) 
debug:assertEq(json?header?data?real, 1.0) 
debug:assertEq(json?header?data?string, "string") 
debug:assertEq(json?header?data?nil, null) 

debug:assertNull(json?not?not)
debug:assertNull(json?header?data?array?not) 
debug:assertNull(json?header?data?map?not) 
debug:assertNull(json?header?data?bool?not)  
debug:assertNull(json?header?data?int?not) 
debug:assertNull(json?header?data?long?not)  
debug:assertNull(json?header?data?real?not)  
debug:assertNull(json?header?data?string?not) 
debug:assertNull(json?header?data?nil?not) 
debug:assertNull(json?header?nil) 
debug:assertNull(json?header?nil?not) 

var not = null
debug:assertNull(not?json) 

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	Subscript/Member Access
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/		
	
var array = def() return [4]
debug:assertEq(array()[0], 4)

var map   = def() return {x->4}
debug:assertEq(map().x, 4)	
debug:assertEq(map()?x, 4)	
debug:assertNull(map()?y)	
	
namespace ns {
	var x = 4
}	

debug:assertEq(ns:x, 4)		

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	Named Args
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/		
	
var named = def(x,y) {
	debug:assertEq(x, "xx")	
	debug:assertEq(y, "yy")	
}	

named(x=>"xx", y=>"yy")
named(y=>"yy", x=>"xx")
named("xx", y=>"yy")
named(x=>"xx", "yy")
	
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	Var Args
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/	
var varArgs = def(x, args...) {
	debug:assertEq(x, "xx")	
	debug:assertTrue(args is Array)	
	debug:assertEq(args.size(), 2)
	debug:assertEq(args[0], "yy")
	debug:assertEq(args[1], "zz")
}	
	
varArgs("xx", "yy", "zz")
varArgs( *["xx", "yy", "zz"] )	
	
	
debug:assertTrue(true)
debug:assertTrue(!false)
	

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	Decorator
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/		
	
var decorator = def(func, args...) {
	debug:assertTrue(func is Function)	
	debug:assertTrue(args is Array)	
	debug:assertEq(args.size(), 2)
	debug:assertEq(args[0], "yy")
	debug:assertEq(args[1], "zz")
	
	return def(xargs...) {
		return func(*xargs)
	}
}	

var f = @decorator("yy", "zz") def(x,y) {
	debug:assertEq(x, "xxx")
	debug:assertEq(y, "yyy")
}

f("xxx", "yyy")
	
	
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	Generator
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/		

var inc = def(n) {
	return gen() {
		while n > 0 {
			yield n
			n -= 1
		}
	}
}

var g = inc(3)
debug:assertTrue(g is Generator)
debug:assertEq(g(), 3)
debug:assertEq(g(), 2)
debug:assertEq(g(), 1)
debug:assertNull(g())
	
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	Semi-colon handling
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/		
;;;	

var t = def();
debug:assertTrue(t is Function)
debug:assertNull(t())
{};
;{};
;;[];;[];
t = def() {
	;
}

debug:assertTrue(t is Function)
debug:assertNull(t())



/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	Return Statement
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/		

var r = def(x) {
	if x == 0 {
		return x
		debug:assertFail()	
	}
	
	if x == 1 {
		return x
		debug:assertFail()	
	}
	
	return;
	debug:assertFail()	
}

debug:assertEq(r(0), 0)
debug:assertEq(r(1), 1)
debug:assertNull(r(2))



/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	Try/Catch/Finally Statement
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/		

var t = def() {
	var x = 0
	try {
		throw "error"
		debug:assertFail()		
	}
	catch e {
		debug:assertTrue(e is Error)		
		debug:assertEq(e, "error")
		x += 1
	}
	finally {		
		x += 1
	}
	
	debug:assertEq(x, 2)
}

t()


var t = def() {
	var x = 0
	try {
		throw "error"
		debug:assertFail()		
	}	
	finally {		
		return 2
	}
	
	debug:assertFail()
}

debug:assertEq(t(), 2)


var t = def() {	
	try {
		throw "error"
		debug:assertFail()		
	}	
	finally {				
	}
	
	debug:assertFail()
}

try {
	t()
	debug:assertFail()		
}
catch ee {
	debug:assertTrue(ee is Error)		
	debug:assertEq(ee, "error")
}

var t = def() {
	var x = 0
	try {
		throw "error"
		debug:assertFail()		
	}	
	catch e {
		debug:assertTrue(e is Error)		
		debug:assertEq(e, "error")
		x += 2
	}
	
	x += 1
	
	debug:assertEq(x, 3)
}

t()


var t = def() {
	var x = 0
	try {
		try {
			throw "error"
			debug:assertFail()		
		}		
		finally {		
			x += 1
		}
	}
	catch e {	
		debug:assertTrue(e is Error)		
		debug:assertEq(e, "error")
		x += 1
	}
	
	debug:assertEq(x, 2)
}

t()



var t = def() {
	var x = 0
	try {
		try {
			throw "error"
			debug:assertFail()		
		}		
		catch e {	
			debug:assertTrue(e is Error)		
			debug:assertEq(e, "error")
			x += 1
		}
		
		x += 2

	}
	catch e {	
		debug:assertFail()
	}
	finally {		
		x += 5
	}
	
	debug:assertEq(x, 8)
}

t()


var t = def() {
	var x = 0
	try {
		try {
			throw "error"
			debug:assertFail()		
		}		
		finally {	
			x = 3
			return x			
		}
		debug:assertFail()		

	}
	catch e {	
		debug:assertFail()
	}
	finally {	
		x = 4
		return x
	}
	
	debug:assertFail()
}

debug:assertEq(t(), 4)


var t = def() {
	var x = 0

	try {
		throw "error"
		debug:assertFail()		
	}		
	finally {	
		x = 3
		return x			
	}
	debug:assertFail()		
}

debug:assertEq(t(), 3)


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	Function Execution Statement
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/		

var f = def(x) {
    var f2 = def(f3) {
        return f3()
    }
   
    try {
        return {
            c -> f2
        }
    }
    catch E {
        debug:assertFail()
    }
}

var z = 0
f(z).c(def() { z+=1 })
debug:assertEq(z, 1)


// non-tailcall recursion
var r = def(n) {
	if n <= 0 return 1
	return r(n-1) + n
}

debug:assertEq(r(0), 1)
debug:assertEq(r(1), 2)
debug:assertEq(r(2), 4)
debug:assertEq(r(3), 7)


// uses tailcall opcode
var fact = def(n) {
	var iter = def(product, n) {
		if n < 2 return product
		return iter(product * n, n - 1)
	}
	return iter(1, n)
}

debug:assertEq(fact(1), 1)
debug:assertEq(fact(4), 24)
debug:assertEq(fact(39L), 2304077777655037952L)
debug:assertEq(fact(10L), 3628800L)

var fact = def(n) {
	var iter = def(product, n) {
		if n < 2 return product
		return iter(n=>n - 1, product=>product * n)
	}
	return iter(product=>1, n=>n)
}

debug:assertEq(fact(n=>1), 1)
debug:assertEq(fact(n=>4), 24)
debug:assertEq(fact(n=>39L), 2304077777655037952L)
debug:assertEq(fact(n=>10L), 3628800L)


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	
	Compound Statements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/	

var y = 0
var x = (case when y == 0 -> { m -> 1} else {}) ? m
debug:assertEq(x, 1)

// Valid but not recommended, assumes the elvis operator will never be null, will always invoke: (ElvisExpr)(2)
var x = (case when y == 0 -> { m -> def(y) return y+=1} else {}) ? m(2)
debug:assertEq(x, 3)

